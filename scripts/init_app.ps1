### please do NOT run this script directly
### this file should be run by yarn init-app-win in root workspace

Set-PSDebug -Strict

[string]$SERVER_PATH = '.\packages\server\.env.local'
[string]$WEB_PATH = '.\packages\solid_web\.env.local'
[string]$ELECTRON_PATH = '.\packages\electron_app\.env.local'

# all .env file will have this varibale
[string]$DOYA_MODE = 'development'

# server .env variable
[string]$DOYA_SERVER_PORT = '3194'
[string]$DB_TYPE = 'mysql'
[string]$DB_USER = 'root'
[string]$DB_PASS = ''
[string]$DB_HOST = 'localhost'
[string]$DB_PORT = '3306'
[string]$DB_NAME = 'youdoya'
[string]$DB_URL = "${DB_TYPE}://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
[string]$DOYA_FIREBASE_SECRET_JSON = ''

# electron .env variable
[string]$WEB_APIKEY = ''
[string]$WEB_AUTH_DOMAIN = ''
[string]$WEB_PROJECT_ID = ''
[string]$WEB_STORAGE_BUCKET = ''
[string]$WEB_MSG_SENDER_ID = ''
[string]$WEB_APP_ID = ''

function WriteErr {
  param (
    $prefix, $msg
  )
  Write-Host '[' -NoNewline
  Write-Host "$prefix" -NoNewline -ForegroundColor Red
  Write-Host '] ' -NoNewline
  Write-Host $msg
}

function WriteInfo {
  param (
    $prefix, $msg
  )
  Write-Host '[' -NoNewline
  Write-Host "$prefix" -NoNewline -ForegroundColor Blue
  Write-Host '] ' -NoNewline
  Write-Host $msg
}

function WriteWarn {
  param (
    $prefix, $msg
  )
  Write-Host '[' -NoNewline
  Write-Host "$prefix" -NoNewline -ForegroundColor Yellow
  Write-Host '] ' -NoNewline
  Write-Host $msg
}

function WriteNormal {
  param (
    $prefix, $msg
  )
  Write-Host '[' -NoNewline
  Write-Host "$prefix" -NoNewline -ForegroundColor Green
  Write-Host '] ' -NoNewline
  Write-Host $msg
}

filter Invoke-Choice {
  Param (
    [Parameter(Mandatory = $true)]
    [string] $caption,

    [Parameter(Mandatory = $true)]
    [string] $msg,

    [Parameter(Mandatory = $true)]
    [array] $choices,

    [switch] $multipleSelection
  )

  $_collection = 'System.Collections.ObjectModel.Collection'
  $_choiceDescription = 'System.Management.Automation.Host.ChoiceDescription'

  $collection = New-Object "${_collection}[${_choiceDescription}]"
  $defaultChoices = New-Object System.Collections.Generic.List[Int]
  for ($i = 0; $i -lt $choices.Count; $i++) {
    $collection.Add($choices[$i].ChoiceDescription)
    if ($choices[$i].Default) {
      $defaultChoices.Add($i)
    }
  }

  if ($defaultChoices.Count -eq 0) {
    $defaultChoices.Add(0)
  }
  $default = if ($multipleSelection) {
    , $defaultChoices
  }
  else {
    $defaultChoices
  }

  foreach ($item in $Host.UI.PromptForChoice($caption, $msg, $collection, $default)) {
    & $choices[$item].ScriptBlock
  }
}

filter New-ChoiceCase {
  Param (
    [Parameter(Mandatory = $true)]
    [string] $label,

    [Parameter(Mandatory = $true)]
    [string] $helpMessage,

    [Parameter(Mandatory = $true)]
    [scriptblock] $scriptBlock,

    [switch] $default
  )

  @{
    choiceDescription = New-Object System.Management.Automation.Host.ChoiceDescription ($label, $helpMessage)
    scriptBlock       = $scriptBlock
    default           = $default
  }
}

function CreateDotenv {
  param (
    $filepath
  )
  Write-Output '# do NOT edit this file.' >$filepath
  Write-Output '# This file is created automatically by run yarn init-app.' >>$filepath

  Write-Output "DOYA_ROOT=$(Get-Location)" >>$filepath
  if (!$?) {
    WriteErr 'CreateDotenv' 'create DOYA_ROOT err.'
    return 1
  }

  Write-Output "DOYA_MODE=${DOYA_MODE}" >>$filepath
}

function InitServer {
  CreateDotenv -filepath $SERVER_PATH

  WriteNormal 'INPUT' 'Please input the listen port of the server.'
  if (!($res = Read-Host '(default = 3194)') -eq '') {
    $DOYA_SERVER_PORT = $res
  }
  WriteInfo 'INFO' "Server will be listening on port ${DOYA_SERVER_PORT}"
  Write-Output "DOYA_SERVER_PORT=${DOYA_SERVER_PORT}" >> $SERVER_PATH

  WriteNormal 'INPUT' 'Will start setting up the prisma connection url. Please follow the prompts to input the values.'
  Write-Host 'Please input database type:' -ForegroundColor Cyan
  if (!($res = Read-Host '(default = mysql)') -eq '') {
    $DB_TYPE = $res
  }
  Write-Host 'Please input database user name:' -ForegroundColor Cyan
  if (!($res = Read-Host '(default = root)') -eq '') {
    $DB_USER = $res
  }
  Write-Host 'Plase input database user passowrd' -ForegroundColor Cyan
  if (!($res = Read-Host '(default = null)') -eq '') {
    $DB_PASS = $res
  }
  Write-Host 'Plase input databse hostname:' -ForegroundColor Cyan
  if (!($res = Read-Host '(default = localhost)') -eq '') {
    $DB_HOST = $res
  }
  Write-Host 'Please input database port:' -ForegroundColor Cyan
  if (!($res = Read-Host '(default = 3306)') -eq '') {
    $DB_PORT = $res
  }
  Write-Host 'Please input database name which you want to use:' -ForegroundColor Cyan
  if (!($res = Read-Host '(default = youdoya)') -eq '') {
    $DB_NAME = $res
  }
  # change DB_URL value using user input
  $DB_URL = "${DB_TYPE}://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
  Invoke-Choice `
    -caption '[Databse url]' `
    -msg "Your database url will be: (${DB_URL}), it is OK?" `
    -choices @(
    New-ChoiceCase -label '&Yes' -helpMessage 'use this url' `
      -scriptBlock {
      Write-Output "DOYA_DB_URL=${DB_URL}" >> $SERVER_PATH
    }
    New-ChoiceCase -label '&No' -helpMessage 'exit init program and start again' `
      -scriptBlock {
      WriteWarn 'NOTICE' 'You say no, please check your input and run this script again.'
      exit 1
    }
  )

  WriteNormal 'INPUT' 'Plase input the firebase secret credential json file name (include extention):'
  $SECRET_JSON_NAME = Read-Host '(example: my_secret.json)'
  $DOYA_FIREBASE_SECRET_JSON = "$(Get-Location)\packages\server\${SECRET_JSON_NAME}"
  Invoke-Choice `
    -caption '[Firebase secret json path]' `
    -msg "Full path to your secret file will be: (${DOYA_FIREBASE_SECRET_JSON}), it is OK?" `
    -choices @(
    New-ChoiceCase -label '&Yes' -helpMessage 'use this path' `
      -scriptBlock {
      Write-Output "DOYA_FIREBASE_SECRET_JSON=${DOYA_FIREBASE_SECRET_JSON}" >> $SERVER_PATH
    }
    New-ChoiceCase -label '&No' -helpMessage 'exit init program and start again' `
      -scriptBlock {
      WriteWarn 'NOTICE' 'You say no, please check your input and run this script again.'
      exit 1
    }
  )
}

function InitElectron {
  CreateDotenv -filepath $ELECTRON_PATH

  WriteNormal 'INPUT' 'Plase input firebase app apikey:'
  $WEB_APIKEY = Read-Host
  WriteWarn 'NOTICE' "This key will be exposed to everyone. (${WEB_APIKEY})"
  WriteWarn 'NOTICE' 'Please make sure it is secure. Is this secure?'
  Invoke-Choice `
    -caption '[Confirm firebase api key]' `
    -msg "Will expose this key to everyone: (${WEB_APIKEY}), it is OK?" `
    -choices @(
    New-ChoiceCase -label '&Yes' -helpMessage 'use this key' `
      -scriptBlock {
      Write-Output "WEB_APIKEY=${WEB_APIKEY}" >> $ELECTRON_PATH
    }
    New-ChoiceCase -label '&No' -helpMessage 'exit init program and start again' `
      -scriptBlock {
      WriteWarn 'NOTICE' 'You say no, please check your input and run this script again.'
      exit 1
    }
  )

  WriteNormal 'INPUT' 'Please input firebase authentication domain:'
  $WEB_AUTH_DOMAIN = Read-Host
  Write-Output "WEB_AUTH_DOMAIN=${WEB_AUTH_DOMAIN}" >> $ELECTRON_PATH

  WriteNormal 'INPUT' 'Please input firebase project id:'
  $WEB_PROJECT_ID = Read-Host
  Write-Output "WEB_PROJECT_ID=${WEB_PROJECT_ID}" >> $ELECTRON_PATH

  WriteNormal 'INPUT' 'Please input firebase storage bucket:'
  $WEB_STORAGE_BUCKET = Read-Host
  Write-Output "WEB_STORAGE_BUCKET=${WEB_STORAGE_BUCKET}" >> $ELECTRON_PATH

  WriteNormal 'INPUT' 'Please input firebase message sender id:'
  $WEB_MSG_SENDER_ID = Read-Host
  Write-Output "WEB_MSG_SENDER_ID=${WEB_MSG_SENDER_ID}" >> $ELECTRON_PATH

  WriteNormal 'INPUT' 'Please input firebase app id:'
  $WEB_APP_ID = Read-Host
  Write-Output "WEB_APP_ID=${WEB_APP_ID}" >> $ELECTRON_PATH

  WriteInfo 'INFO' 'Your electron app will use following setting to init firebase app:'
  Write-Host '{'
  Write-Host "  authDomain: ${WEB_AUTH_DOMAIN}"
  Write-Host "  projectId: ${WEB_PROJECT_ID}"
  Write-Host "  storageBucket: ${WEB_STORAGE_BUCKET}"
  Write-Host "  messageSenderId: ${WEB_MSG_SENDER_ID}"
  Write-Host "  appId: ${WEB_APP_ID}"
  Write-Host '{'
}

function InitWeb {
  CreateDotenv -filepath $WEB_PATH
}

function SelectMode {
  Invoke-Choice `
    -caption '[Select mode]' `
    -msg 'Please select the mode of the application.' `
    -choices @(
    New-ChoiceCase -label '&Development' -helpMessage 'set mode to development' `
      -scriptBlock {
      $script:DOYA_MODE = 'development'
      WriteInfo 'INFO' 'App will running in Development Mode.'
    }
    New-ChoiceCase -label '&Production' -helpMessage 'set mode to production' `
      -scriptBlock {
      $script:DOYA_MODE = 'production'
      WriteInfo 'INFO' 'App will running in Production Mode.'
    }
  )
}

function Main {
  WriteNormal 'START' 'init start...'
  SelectMode
  InitServer
  InitElectron
  InitWeb
  exit 0
}

Main
